name: CI-CD

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # (선택 사항) Python 환경 설정 및 테스트 실행
      # - name: Set up Python 3.9
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.9'
      #
      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #
      # - name: Run Tests
      #   run: pytest

      # Docker 이미지 빌드 및 푸시
      - name: Build & Push Docker Image
        run: |
          echo "Logging into GitHub Container Registry..."
          docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          echo "Building Docker image..."
          docker build -f Dockerfile -t ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask .
          echo "Pushing Docker image..."
          docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask

      # 서버 배포 (SSH를 통한 원격 서버 컨테이너 관리)
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            export PATH=$PATH:/usr/local/bin/
            echo "Stopping existing container if it exists..."
            docker ps -aq --filter "name=ufc-flask" | grep . && docker rm -f ufc-flask || echo "No container to remove."
            
            echo "GitHub registry login"
            docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            echo "Pulling the latest image..."
            docker pull ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask
            
            echo "Starting new container..."
            docker run -d --label io.portainer.accesscontrol.teams=upda --name ufc-flask -p 9998:9998 ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask
            
            echo "Cleaning up unused images..."
            docker image prune -f
            
            echo "Deployment complete. Current running containers:"
            docker ps
