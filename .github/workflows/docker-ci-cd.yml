# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

#env:
#  CI: false

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
    # 코드 체크아웃
    - name: Checkout Repository
      uses: actions/checkout@v4

    # JDK 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Secret 주입
    - name: Append Secrets Settings
      run: |
        echo "${{ secrets.APPLICATION_YML }}" >> ./src/main/resources/application.yml
      shell: bash

    # Gradle 빌드 및 테스트
    - name: Gradle Build and Test
      run: ./gradlew clean build

    # Docker 빌드 및 푸시
    - name: Build & Push Docker Image
      run: |
        docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask .
        docker push ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask

    # 서버 배포
    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_KEY }}
        script: |
          export PATH=$PATH:/usr/local/bin/
          echo "Stopping existing container if it exists..."
          docker ps -q --filter "name=ufc-flask" | grep . && docker stop ufc-flask && docker rm ufc-flask || echo "No container to stop."

          echo "GitHub registry login"
          docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

          echo "Pulling the latest image..."
          docker pull ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask

          echo "Starting new container..."
          docker run -d --name ufc-flask -p 9998:9998 ghcr.io/${{ secrets.DOCKER_USERNAME }}/ufc:flask

          echo "Cleaning up unused images..."
          docker image prune -f

          echo "Deployment complete. Current running containers:"
          docker ps